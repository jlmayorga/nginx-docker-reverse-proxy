#
# Acts as a nginx HTTPS proxy server
# enabling CORS only to domains matched by regex
# /https?://.*\.mckinsey\.com(:[0-9]+)?)/
#
# Based on:
# * http://blog.themillhousegroup.com/2013/05/nginx-as-cors-enabled-https-proxy.html
# * http://enable-cors.org/server_nginx.html
#
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;
  server {
    listen 80;
    server_name localhost;

    location / {
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Nginx doesn't support nested If statements, so we
      # concatenate compound conditions on the $cors variable
      # and process later


      set $cors "1";

      # OPTIONS indicates a CORS pre-flight request
      if ($request_method = 'OPTIONS') {
         set $cors "${cors}o";
      }

      # Append CORS headers to any request from
      # allowed CORS domain, except OPTIONS
      if ($cors = "1") {
         add_header 'Access-Control-Allow-Origin: $http_origin' always;
         add_header 'Access-Control-Allow-Credentials: true' always;
         proxy_pass      http://www.google.com;
      }

      # OPTIONS (pre-flight) request from allowed
      # CORS domain. return response directly
      if ($cors = "1o") {
         add_header 'Access-Control-Allow-Origin: $http_origin' always;
         add_header 'Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE' always;
         add_header 'Access-Control-Allow-Credentials: true' always;
         add_header 'Access-Control-Allow-Headers: Origin,Content-Type,Accept' always;
         add_header Content-Length 0 always;
         add_header Content-Type text/plain always;
         return 204;
      }

      # Requests from non-allowed CORS domains
         proxy_pass      http://www.google.com;
    }
  }
}
